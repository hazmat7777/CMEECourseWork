Starting code feedback for Harry, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.56 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week1, .git, Feedback

Found the following files in parent directory: README.txt, .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp
*/sandbox/

**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:

**********************************************************************
Do I like this better?

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 1 weekly directories: week1

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: data, sandbox, Results, code

Found the following files: READMEwk1.md

Checking for readme file in weekly directory...

Found README in parent directory, named: READMEwk1.md

Printing contents of READMEwk1.md:

**********************************************************************
My CMEE Coursework Repository

    Brief description: 
        week 1 coursework for CMEE MSc 2024-5

    Languages: 
        plain text
        shell script

    Dependencies:
        none

    Installation:
        N/A  

    Project structure and Usage: 
        code
        data
        results

    Author name and contact
        Harry Trevelyan
        hjt24@ic.ac.uk
**********************************************************************

Results directory is empty - good! 

Found 12 code files: CompileLaTeX.sh, ConcatenateTwoFiles.sh, FirstBiblio.bib, boilerplate.sh, variables.sh, MyExampleScript.sh, tabtocsv.sh, tiff2png.sh, UnixPrac1.txt, FirstExample.tex, csvtospace.sh, CountLines.sh

Found the following extra files: FirstExample.pdf
0.5 pt deducted per extra file

Current Points = 99.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:

**********************************************************************
#!/bin/bash
pdflatex $1.tex
bibtex $1
pdflatex $1.tex
pdflatex $1.tex
evince $1.pdf & #opens the evince pdf viewer

##cleanup
rm *.aux
rm *.log
rm *.bbl
rm *.blg

**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 


**********************************************************************
This is pdfTeX, Version 3.141592653-2.6-1.40.25 (TeX Live 2023/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(/usr/share/texlive/texmf-dist/tex/latex/tools/.tex
LaTeX2e <2023-11-01> patch level 1
L3 programming layer <2024-01-22>
File ignored)
*
! Emergency stop.
<*> 
    
!  ==> Fatal error occurred, no output PDF file produced!
Transcript written on .log.
This is pdfTeX, Version 3.141592653-2.6-1.40.25 (TeX Live 2023/Debian) (preloaded format=pdflatex)
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

bibtex: Need exactly one file argument.
Try `bibtex --help' for more information.
rm: cannot remove '*.aux': No such file or directory
rm: cannot remove '*.log': No such file or directory
rm: cannot remove '*.bbl': No such file or directory
rm: cannot remove '*.blg': No such file or directory

(process:144639): Gtk-WARNING **: 07:29:16.460: Locale not supported by C library.
	Using the fallback 'C' locale.

(evince:144639): Gtk-WARNING **: 07:29:16.502: Theme parsing error: gtk-keys.css:1:0: Failed to import: Error opening file /snap/code/172/usr/share/themes/Default/gtk-3.0/gtk-keys.css: Permission denied
Gtk-Message: 07:29:16.502: Failed to load module "canberra-gtk-module"
Gtk-Message: 07:29:16.503: Failed to load module "canberra-gtk-module"
/home/mhasoba/snap/code/common/.cache/gio-modules/libdconfsettings.so: cannot open shared object file: Permission denied
Failed to load module: /home/mhasoba/snap/code/common/.cache/gio-modules/libdconfsettings.so

** (evince:144639): WARNING **: 07:29:16.774: set_filenames: Error when getting information for file ?/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/HarryTrevelyan_hjt24/week1/code/.pdf?: No such file or directory

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:

**********************************************************************
#!/bin/bash

## cat means stick together or print

# $1 and $2 are the files you want to merge

# $3 is the merged file. Remember this will be output to the current directory unless a separate path is specified in the $3 argument

## old version

#cat "$1" > "$3"
#cat "$2" >> "$3"
#echo "Merged File is"
#cat "$3"

#exit

## new version

#if [ $# -eq 3 ]; then
    #cat $1 > $3
    #cat $2 >> $3

    #echo "Merged File is" 
    #cat $3
    #echo -e "\nConcatenated file was saved as $3" #-e to escape echo to enable special \n

#else
   #echo "Please enter three arguments: two files to concatenate, and the name for the concatenated output."
   #exit

#fi

#exit 


## newest version to additionally check input type and with clearer comments

# Check if exactly 3 arguments are provided
if [ $# -ne 3 ]; then
    echo "Please enter three arguments: two files to concatenate, and the name for the concatenated output."
    exit 1
fi

# Check if the first two arguments are files
if [ -f "$1" ] && [ -f "$2" ]; then #arguments in "" to avoid special characters being interpreted
    cat "$1" > "$3"
    cat "$2" >> "$3"

    echo "Merged File is:"
    cat "$3"
    echo -e "\nConcatenated file was saved as $3"
else
    echo "The first two arguments must be valid files."
    exit 1
fi

exit 0
**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter three arguments: two files to concatenate, and the name for the concatenated output.

**********************************************************************

Code ran without errors

Time consumed = 0.00564s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:

**********************************************************************
@article{verhulst1838notice,
  title={Notice sur la loi que la population suit dans son accroissement},
  author={Verhulst, Pierre-Fran{\c{c}}ois},
  journal={Corresp. Math. Phys.},
  volume={10},
  pages={113--126},
  year={1838}
}
**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file boilerplate.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Your Name hjt24@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2019

echo -e "\nThis is a shell script! \n"

#exit

**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 


**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00455s

======================================================================
Inspecting script file variables.sh...

File contents are:

**********************************************************************
#!/bin/sh

## illustrates he use of variables

## special variables

echo "This script was called with $# parameters"
echo "The script's name is $0"
echo "The first argument is $1"
echo "The second argument is $2"

## assigned variables

#explicit declaration
MY_VAR='some string'
echo 'the current value of the variable is:' $MY_VAR
 echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

#Reading (multiple values) from user input:
echo 'Enter two numbers separated by space(s)'
read a b
echo
echo 'you entered' $a 'and' $b '; Their sum is:'

#Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM

**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 


**********************************************************************
This script was called with 0 parameters
The script's name is variables.sh
The first argument is 
The second argument is 
the current value of the variable is: some string
Please enter a new string

the current value of the variable is:

Enter two numbers separated by space(s)

you entered and ; Their sum is:


**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

expr: syntax error: missing argument after ‘+’

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:

**********************************************************************
#!/bin/sh

MSG1="Hello"
MSG2=$USER
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo

**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 


**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00667s

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Harry Trevelyan hjt24@ic.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2019

##old version

#echo "Creating a comma delimited version of $1 ..."
#cat $1 | tr -s "\t" "," >> $1.csv
#echo "Done!"

##improved version

if [ $# -eq 1 ]; then
    echo "Creating a comma delimited version of $1 ..."
    cat "$1" | tr -s "\t" "," >> "$1.csv"
else
    echo "Please enter one file."
    exit 1
fi

echo "Done!"

exit
**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter one file.

**********************************************************************

Code ran without errors

Time consumed = 0.00568s

======================================================================
Inspecting script file tiff2png.sh...

File contents are:

**********************************************************************
#!/bin/bash

for f in *.tif; 
    do  
        echo "Converting $f"; 
        convert "$f"  "$(basename "$f" .tif).png"; 
    done

**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 


**********************************************************************
Converting *.tif

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

convert-im6.q16: unable to open image `*.tif': No such file or directory @ error/blob.c/OpenBlob/2964.
convert-im6.q16: no images defined `*.png' @ error/convert.c/ConvertImageCommand/3234.

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:

**********************************************************************
#directory: /home/harry/Documents/CMEECourseWork/week2/code

##1

    wc -l ../data/fasta/407228326.fasta
    wc -l ../data/fasta/407228412.fasta
    wc -l ../data/fasta/E.coli.fasta

##2

    tail -n +2 ../data/fasta/E.coli.fasta

##3

    tail -n +2 ../data/fasta/E.coli.fasta | tr -d '\n' | wc -c

    #output 4686137

##4

    tr -d '\n' < ../data/fasta/E.coli.fasta | grep -o 'ATGC' | wc -l

    #output 21968

##5

#finding A and T

    #grep -o -e 'A' -e 'T' ../data/fasta/E.coli.fasta | wc -l

#finding G and C

    #grep -o -e 'G' -e 'C' ../data/fasta/E.coli.fasta | wc -l

#dividing the above using brackets
    # $((...)) use to do arithmetic
    # $(...) command substitution
        #command inside executed and output captured

    #result=$(( $(grep -o -e 'A' -e 'T' ../data/fasta/E.coli.fasta | wc -l) / $(grep -o -e 'G' -e 'C' ../data/fasta/E.coli.fasta | wc -l) )); echo "$result"

#final- to show decimal place (as bash uses integers)
    #need to use basic calculator bc
    #use echo to send output to bc
    #scale is a modifier setting dp

    result=$(echo "scale=4; $(grep -o -e 'A' -e 'T' ../data/fasta/E.coli.fasta | wc -l) / $(grep -o -e 'G' -e 'C' ../data/fasta/E.coli.fasta | wc -l)" | bc); echo "$result"

    #output .9692

**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file FirstExample.tex...

File contents are:

**********************************************************************
\documentclass[12pt]{article}

\title{A Simple Document}

\author{Harry}

\date{}

\begin{document}
    \maketitle
    \begin{abstract}
            This paper analyses a seminal equation in population biology.
    \end{abstract}

    \section{Introduction}
        Blah Blah
    
    \section{Materials and Methods}

    A foundational equation of population biology is:

    \begin{equation}
        \frac{dN}{dt} = r N (1 - \frac{N}{K})
    \end{equation}

    It was first proposed by Verhulst in 1838 \cite{verhulst1838notice}.

    \bibliographystyle{plain}

    \bibliography{FirstBiblio}

\end{document}


**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file csvtospace.sh...

File contents are:

**********************************************************************
if [ $# -eq 1 ] && [ -f $1 ]; then
    echo "Creating a space-delimited version of $1 ..."
    cat "$1" | tr -s "," " " >> "$1.ssv"

elif [ ! $# -eq 1 ] && [ -f $1 ]; then
    echo "Error- please input ONE file."
    exit

elif [ $# -eq 1 ] && [ ! -f $1 ]; then
    echo "Error- input must be a file."
    
fi

echo "Done!"


**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 


**********************************************************************
Error- please input ONE file.

**********************************************************************

Code ran without errors

Time consumed = 0.00409s

======================================================================
Inspecting script file CountLines.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Checking if one file is being called

if [ $# -eq 1 ] && [ -f $1 ]; then
    NumLines=`wc -l < $1`
    echo "The file $1 has $NumLines lines"
    echo

else 
    echo "Please enter one file."

fi
**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter one file.

**********************************************************************

Code ran without errors

Time consumed = 0.00549s

======================================================================
======================================================================
Finished running scripts

Ran into 3 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!